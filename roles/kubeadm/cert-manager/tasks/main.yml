- name: Offline environment cert-manager image import
  tags: ['cert-manager', 'cert-manager-image']
  block:
    - name: msg
      debug:
        msg: "{{ inventory_hostname }} {{ ansible_hostname }}"
    - name: Create tools storage directory
      file:
        path: "/server/tools/{{ role_service_name }}/image"
        state: directory

    - name: copy image to remote host
      copy:
        src: "{{ image_path }}/{{ role_service_name }}/{{ role_service_name }}.{{ image.version }}.tar.gz"
        dest: "/server/tools/{{ role_service_name }}/image/{{ role_service_name }}.{{ image.version }}.tar.gz"
        owner: root
        group: root
        mode: 0644

    - name: image load
      community.docker.docker_image_load:
        path: "/server/tools/{{ role_service_name }}/image/{{ role_service_name }}.{{ image.version }}.tar.gz"
  when: network == false

- name: cert-manager install
  tags: ['cert-manager', 'cert-manager-install']
  block:
    - name: Create helm deploy directory
      file:
        path: "/server/tools/{{ role_service_name }}/helm"
        state: directory
        
    - name: Copy cert-manager helm chart file
      copy:
        src: "{{ inventory_dir }}/roles/kubeadm/{{ role_service_name }}/files/{{ role_service_name }}-{{ helm_chart.version }}.tgz"
        dest: "/server/tools/{{ role_service_name }}/helm/{{ role_service_name }}-{{ helm_chart.version }}.tgz"
        owner: root
        group: root
        mode: 0644

    - name: Write cert-manager template to file
      template:
        src: "{{ inventory_dir }}/roles/kubeadm/{{ role_service_name }}/templates/{{ item.src }}.j2"
        dest: "/server/tools/{{ role_service_name }}/helm/{{ item.dest }}"
        owner: root
        group: root
        mode: 0644
      with_items:
        - { src: "values.yml", dest: "values.yml" }

    - name: Deploy cert-manager chart from local path
      kubernetes.core.helm:
        name: "{{ helm_chart.name }}"
        chart_ref: "/server/tools/{{ role_service_name }}/helm/{{ role_service_name }}-{{ helm_chart.version }}.tgz"
        release_namespace: "cert-manager"
        create_namespace: yes
        values_files:
          - "/server/tools/{{ role_service_name }}/helm/values.yml"
  run_once: yes
  delegate_to: "{{ hostvars[groups['master'][0]].inventory_hostname }}"

- name: ca证书颁发
  tags: ['cert-manager', 'cert-manager-ca']
  block:
    - name: Create ca deploy directory
      file:
        path: "/server/tools/{{ role_service_name }}/ca"
        state: directory

    - name: Write cert-manager template to file
      template:
        src: "{{ inventory_dir }}/roles/kubeadm/{{ role_service_name }}/templates/ca/{{ item.src }}.j2"
        dest: "/server/tools/{{ role_service_name }}/{{ item.dest }}"
        owner: root
        group: root
        mode: 0644
      with_items:
        - { src: "cluster-issue.yml", dest: "cluster-issue.yml" }
        - { src: "issue-ca.yml", dest: "issue-ca.yml" }
        - { src: "issue.yml", dest: "issue.yml" }
        
    - name: Create ca certificate issuer
      kubernetes.core.k8s:
        state: present
        src: "/server/tools/{{ role_service_name }}/{{ item.src }}"
      with_items:
        - { src: issue.yml }
        - { src: issue-ca.yml }
        - { src: cluster-issue.yml }
  run_once: yes
  delegate_to: "{{ hostvars[groups['master'][0]].inventory_hostname }}"

- name: cli工具安装
  tags: ['cert-manager', 'cert-manager-cli']
  block:
    - name: Create krew deploy directory
      file:
        path: "/server/tools/{{ role_service_name }}/krew"
        state: directory

    - name: copy plugin cert-manager
      copy:
        src: "{{ libs_path }}/kubeadm/krew/plugin/cert-manager/{{ item.src }}"
        dest: "/server/tools/cert-manager/krew/{{ item.dest }}"
        owner: root
        group: root
        mode: 0755
      with_items:
        - { src: "kubectl-cert_manager-linux-amd64.tar.gz", dest: "kubectl-cert_manager-linux-amd64.tar.gz" }
        - { src: "cert-manager.yml", dest: "cert-manager.yml" }

    - name: krew install plugin in cert-manager
      shell: "source  /etc/profile.d/krew.sh;
        kubectl krew install --manifest=/server/tools/cert-manager/krew/cert-manager.yml
        --archive=/server/tools/cert-manager/krew/kubectl-cert_manager-linux-amd64.tar.gz
      "
  run_once: yes
  delegate_to: "{{ hostvars[groups['master'][0]].inventory_hostname }}"
